package com.citiustech.mrr;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class WorkflowItemServiceTask implements java.io.Serializable, org.kie.api.runtime.process.WorkItemHandler {

    static final long serialVersionUID = 1L;
    
    private static final String INSERT_SQL_QUERY = "INSERT into WorkflowItem (AssignedTo, ActionPerformed, StatusCode, ProjectId, MemberId, SubMeasureGroupId, VisitSSUI, DenominatorInclusionDate, MedicalRecordId, ChaseItemId, DueDate, ReviewBy, ReportingFromDate, ReportingToDate, ActiveFlag, ProcessInstanceId, WorkflowContainerId, WorkflowInProgress, OverreadCount, AssignedDate, CreatedDate, ModifiedDate, CreatedBy, ModifiedBy, DeletedFlag, ProjectType, WorkflowItemCode, BusinessGroupCode, SubMeasureGroupCode, WorkflowIndicator, RtpFlag, HoldFlag,WorkflowRequestId, SectionIndicator) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    
    private static final String CHASE_STATUS_ID = "select top 1 * from ChaseStatusActionMaster where ChaseStatusMasterCode = ? and ActionIndicator = ?";
    private static final String SQL_QUERY = "UPDATE WorkflowItem SET AssignedTo = ? , StatusCode = ?, OverreadCount = ?, WorkflowIndicator = ?, ReviewBy = ?, ProcessInstanceId = ?, DueDate = ?, ChaseItemId = ?, ActionPerformed = ?, ModifiedDate = ?, ModifiedBy = ?, MandatoryReviewFlag = ?,VisitSSUI = ?, ChaseStatusId = ?, EditFlag = ?, SectionIndicator = ?, HasMissingValue = ?, AssignedDate = ? WHERE WorkflowItemId = ?";
    private static final String WORKFLOW_HISTORY_PROCEDURE_NAME = "{call usp_insertWorkflowItemAcitvityAudit(?,?,?)}";
    private static final String PROCEDURE_CONTEXT = "Abstraction";
    
    public WorkflowItemServiceTask() {
    }

    @Override
    public void executeWorkItem(org.kie.api.runtime.process.WorkItem workItem, org.kie.api.runtime.process.WorkItemManager manager) {
        // extract parameters
        java.util.Map<String, Object> results = new java.util.HashMap<String, Object>();
        com.citiustech.mrr.WorkflowItem workflowItem = (com.citiustech.mrr.WorkflowItem) workItem.getParameter("workflowItem");
        
        try (java.sql.Connection conn = com.citiustech.mrr.MRRConnectionUtil.getConnection()) {
            try (java.sql.PreparedStatement stmt = conn.prepareStatement(SQL_QUERY);java.sql.CallableStatement clbStmt = conn.prepareCall(WORKFLOW_HISTORY_PROCEDURE_NAME);java.sql.PreparedStatement insStmt = conn.prepareStatement(INSERT_SQL_QUERY);java.sql.PreparedStatement selectStmt = conn.prepareStatement(CHASE_STATUS_ID)) {
                if(workflowItem.getWorkflowItemId()==null||workflowItem.getWorkflowItemId()==0){
                    insertIntoWorkflowItem(insStmt, workflowItem);
                    workflowItem.setExceptionFlag(false);
                    results.put("workflowItem", workflowItem);
                    manager.completeWorkItem(workItem.getId(), results);
                    return;
                }
                
                int chaseStatusId = fetchChaseStausId(selectStmt, workflowItem);
                workflowItem.setChaseStatusId(Long.valueOf(chaseStatusId));
                updateWorkflowItem(stmt, workflowItem);
                workflowItemHistory(clbStmt, workflowItem);
                workflowItem.setExceptionFlag(false);
                
                conn.commit();
                results.put("workflowItem", workflowItem);
                manager.completeWorkItem(workItem.getId(), results);
            } catch(java.sql.SQLException ex){
                System.out.println("[Inside:WorkflowItemServiceTask:Expression] [ERROR:SQL query execution failed.] " + ex);
                try {
                    conn.rollback();
                    System.err.println("[Inside:WorkflowItemServiceTask:Expression] [WARN:SQL query transaction has been rolled back for " + workflowItem.getWorkflowIndicator() + " ] ");
                    throw new com.citiustech.mrr.WorkflowException("SQL query transaction has been rolled back for " + workflowItem.getWorkflowIndicator());
                } catch(java.sql.SQLException e){
                    System.err.println("[Inside:WorkflowItemServiceTask:Expression] [ERROR:There was an error while making a rollback.] " + e);
                }
            }
        } catch(java.sql.SQLException ex) {
                System.out.println("[Inside:WorkflowItemServiceTask:Expression] [ERROR:SQL connection failed.] " + ex);
        }
    }

    @Override
    public void abortWorkItem(org.kie.api.runtime.process.WorkItem workItem, org.kie.api.runtime.process.WorkItemManager manager) {
        // Do nothing, notifications cannot be aborted
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [WARN:Aborting WorkflowItemServiceTask.]");
        java.util.Map<String, Object> results = new java.util.HashMap<String, Object>();
        com.citiustech.mrr.WorkflowItem workflowItem = (com.citiustech.mrr.WorkflowItem) workItem.getParameter("workflowItem");
        workflowItem.setExceptionFlag(true);
        results.put("workflowItem", workflowItem);
        manager.completeWorkItem(workItem.getId(), results);
        //manager.abortWorkItem(workItem.getId());
    }

    private void insertIntoWorkflowItem(java.sql.PreparedStatement stmt, com.citiustech.mrr.WorkflowItem workflowItem) throws java.sql.SQLException {
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:WorkflowItem Status Code is] " + workflowItem.getStatusCode());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:New assigedTo username is] " + workflowItem.getAssignedTo());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:OvereadCount is] " + workflowItem.getOverreadCount());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:workflowIndicator is] " + workflowItem.getWorkflowIndicator());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:ReviewBy is] " + workflowItem.getReviewBy());

        stmt.setString(1, workflowItem.getAssignedTo());
        stmt.setString(2, workflowItem.getAction());
        stmt.setString(3, workflowItem.getStatusCode());
        stmt.setInt(4, workflowItem.getProjectId());
        stmt.setInt(5, workflowItem.getMemberId().intValue());
	    stmt.setInt(6, workflowItem.getSubMeasureGroupId().intValue());
	    stmt.setString(7, workflowItem.getVisitSSUI());
	    stmt.setTimestamp(8, formatTime(workflowItem.getDenominatorInclusionDate()));
	    stmt.setInt(9, workflowItem.getMedicalRecordId().intValue());
	    stmt.setInt(10, workflowItem.getChaseItemId().intValue());
	    stmt.setTimestamp(11, formatTime(workflowItem.getDueDate()));
	    stmt.setString(12, workflowItem.getReviewBy());
	    stmt.setTimestamp(13, formatTime(workflowItem.getReportingFromDate()));
	    stmt.setTimestamp(14, formatTime(workflowItem.getReportingToDate()));
	    stmt.setBoolean(15, workflowItem.getActiveFlag());
	    stmt.setInt(16, workflowItem.getProcessInstanceId().intValue());
	    stmt.setString(17, workflowItem.getWorkflowContainerId());
	    stmt.setBoolean(18, workflowItem.getWorkflowInProgress());
	    stmt.setInt(19, workflowItem.getOverreadCount());
	    stmt.setTimestamp(20, formatTime(workflowItem.getAssignedDate()));
	    stmt.setTimestamp(21, formatTime(workflowItem.getCreatedDate()));
	    stmt.setTimestamp(22, formatTime(workflowItem.getModifiedDate()));
	    stmt.setString(23, workflowItem.getCreatedBy());
	    stmt.setString(24, workflowItem.getModifiedBy());
	    stmt.setBoolean(25, workflowItem.getDeletedFlag());
	    stmt.setString(26, workflowItem.getProjectType());
	    stmt.setString(27, workflowItem.getWorkflowItemCode());
	    stmt.setString(28, workflowItem.getBusinessGroupCode());
	    stmt.setString(29, workflowItem.getSubMeasureGroupCode());
	    stmt.setString(30, workflowItem.getWorkflowIndicator());
	    stmt.setBoolean(31, workflowItem.getRtpFlag());
	    stmt.setBoolean(32, workflowItem.getHoldFlag());
	    stmt.setInt(33, workflowItem.getWorkflowRequestId().intValue());
	    stmt.setString(34, workflowItem.getSectionIndicator());
        
        stmt.executeUpdate();
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Insert into WorkflowItem query execution successful]");
    }

    private void updateWorkflowItem(java.sql.PreparedStatement stmt, com.citiustech.mrr.WorkflowItem workflowItem) throws java.sql.SQLException {
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:WorkflowItem Status Code is] " + workflowItem.getStatusCode());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:New assigedTo username is] " + workflowItem.getAssignedTo());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:OvereadCount is] " + workflowItem.getOverreadCount());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:workflowIndicator is] " + workflowItem.getWorkflowIndicator());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:ReviewBy is] " + workflowItem.getReviewBy());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:HasMissingValue is] " + workflowItem.getHasMissingValue());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Workflow_Item ID is] " + workflowItem.getWorkflowItemId());
        
        stmt.setString(1, workflowItem.getAssignedTo());
        stmt.setString(2, workflowItem.getStatusCode());
        stmt.setInt(3, workflowItem.getOverreadCount());
        stmt.setString(4, workflowItem.getWorkflowIndicator());
        stmt.setString(5, workflowItem.getReviewBy());
        longNullChecker(stmt,6,workflowItem.getProcessInstanceId());
        stmt.setTimestamp(7, formatTime(workflowItem.getDueDate()));
		//stmt.setTimestamp(8, formatTime(workflowItem.getDenominatorInclusionDate()));
		longNullChecker(stmt,8,workflowItem.getChaseItemId());
		stmt.setString(9, workflowItem.getAction());
		stmt.setTimestamp(10, formatTime(workflowItem.getModifiedDate()));
		stmt.setString(11, workflowItem.getModifiedBy());
		booleanNullChecker(stmt, 12, workflowItem.getMandatoryReviewFlag());
		stmt.setString(13, workflowItem.getVisitSSUI());
		longNullChecker(stmt,14,workflowItem.getChaseStatusId());
        stmt.setBoolean(15, workflowItem.getEditFlag());
		stmt.setString(16, workflowItem.getSectionIndicator());
		booleanNullChecker(stmt, 17, workflowItem.getHasMissingValue());
		stmt.setTimestamp(18, formatTime(workflowItem.getAssignedDate()));
        longNullChecker(stmt,19,workflowItem.getWorkflowItemId());
        stmt.executeUpdate();
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Update into WorkflowItem query execution successful]");
    }
    
    private void longNullChecker(java.sql.PreparedStatement stmt, int index, java.lang.Long value) throws java.sql.SQLException {
        if(value!=null){
		    stmt.setInt(index, value.intValue());
		} else {
		    stmt.setNull(index, java.sql.Types.INTEGER);
		}
    }
    
    private void booleanNullChecker(java.sql.PreparedStatement stmt, int index, java.lang.Boolean value) throws java.sql.SQLException {
        if(value!=null){
		    stmt.setBoolean(index, value);
		} else {
		    stmt.setInt(index, 0);
		}
    }
    
    private void workflowItemHistory(java.sql.CallableStatement clbStmt, com.citiustech.mrr.WorkflowItem workflowItem) throws java.sql.SQLException {
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Procedure Context] " + PROCEDURE_CONTEXT);
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Action code is] " + workflowItem.getAction());
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:Workflow_Item ID is] " + workflowItem.getWorkflowItemId());
        
        clbStmt.setString(1,PROCEDURE_CONTEXT);
        clbStmt.setString(2,workflowItem.getAction());
        clbStmt.setInt(3,workflowItem.getWorkflowItemId().intValue());
        
        clbStmt.execute();
        System.out.println("[Inside:WorkflowItemServiceTask:Expression] [INFO:procedure call successful]");
    }
    
    private java.sql.Timestamp formatTime(java.util.Date date) {
        java.sql.Timestamp timestamp = null;
        if(date!=null){
            java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd kk:mm:ss.SSS");
		    String strDate= formatter.format(date);
		    timestamp = java.sql.Timestamp.valueOf(strDate);
        }

		return timestamp;
    }
    
    private int fetchChaseStausId(java.sql.PreparedStatement selectStmt, com.citiustech.mrr.WorkflowItem workflowItem) throws java.sql.SQLException {
        selectStmt.setString(1, workflowItem.getStatusCode());
        selectStmt.setString(2, "A");
        java.sql.ResultSet rs = selectStmt.executeQuery();
        int chaseStatusId = 0;
        if(rs.next()){
              chaseStatusId = rs.getInt("ChaseStatusMasterId");
        }
     return chaseStatusId;
    }
    
}